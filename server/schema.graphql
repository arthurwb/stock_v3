# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type tOptions {
  id: ID!
  optionName: String
  optionShort: String
  optionDescription: String
  optionPrice: Decimal
  historicalPrices(where: tHistoricalPricesWhereInput! = {}, orderBy: [tHistoricalPricesOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: tHistoricalPricesWhereUniqueInput): [tHistoricalPrices!]
  historicalPricesCount(where: tHistoricalPricesWhereInput! = {}): Int
  optionCarrots(where: tCarrotsWhereInput! = {}, orderBy: [tCarrotsOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: tCarrotsWhereUniqueInput): [tCarrots!]
  optionCarrotsCount(where: tCarrotsWhereInput! = {}): Int
  userQueue(where: tUserQueueWhereInput! = {}, orderBy: [tUserQueueOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: tUserQueueWhereUniqueInput): [tUserQueue!]
  userQueueCount(where: tUserQueueWhereInput! = {}): Int
  eventQueue(where: tEventQueueWhereInput! = {}, orderBy: [tEventQueueOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: tEventQueueWhereUniqueInput): [tEventQueue!]
  eventQueueCount(where: tEventQueueWhereInput! = {}): Int
}

scalar Decimal

input tOptionsWhereUniqueInput {
  id: ID
}

input tOptionsWhereInput {
  AND: [tOptionsWhereInput!]
  OR: [tOptionsWhereInput!]
  NOT: [tOptionsWhereInput!]
  id: IDFilter
  optionName: StringFilter
  optionShort: StringFilter
  optionDescription: StringFilter
  optionPrice: DecimalFilter
  historicalPrices: tHistoricalPricesManyRelationFilter
  optionCarrots: tCarrotsManyRelationFilter
  userQueue: tUserQueueManyRelationFilter
  eventQueue: tEventQueueManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DecimalFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalFilter
}

input tHistoricalPricesManyRelationFilter {
  every: tHistoricalPricesWhereInput
  some: tHistoricalPricesWhereInput
  none: tHistoricalPricesWhereInput
}

input tCarrotsManyRelationFilter {
  every: tCarrotsWhereInput
  some: tCarrotsWhereInput
  none: tCarrotsWhereInput
}

input tUserQueueManyRelationFilter {
  every: tUserQueueWhereInput
  some: tUserQueueWhereInput
  none: tUserQueueWhereInput
}

input tEventQueueManyRelationFilter {
  every: tEventQueueWhereInput
  some: tEventQueueWhereInput
  none: tEventQueueWhereInput
}

input tOptionsOrderByInput {
  id: OrderDirection
  optionName: OrderDirection
  optionShort: OrderDirection
  optionDescription: OrderDirection
  optionPrice: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input tOptionsUpdateInput {
  optionName: String
  optionShort: String
  optionDescription: String
  optionPrice: Decimal
  historicalPrices: tHistoricalPricesRelateToManyForUpdateInput
  optionCarrots: tCarrotsRelateToManyForUpdateInput
  userQueue: tUserQueueRelateToManyForUpdateInput
  eventQueue: tEventQueueRelateToManyForUpdateInput
}

input tHistoricalPricesRelateToManyForUpdateInput {
  disconnect: [tHistoricalPricesWhereUniqueInput!]
  set: [tHistoricalPricesWhereUniqueInput!]
  create: [tHistoricalPricesCreateInput!]
  connect: [tHistoricalPricesWhereUniqueInput!]
}

input tCarrotsRelateToManyForUpdateInput {
  disconnect: [tCarrotsWhereUniqueInput!]
  set: [tCarrotsWhereUniqueInput!]
  create: [tCarrotsCreateInput!]
  connect: [tCarrotsWhereUniqueInput!]
}

input tUserQueueRelateToManyForUpdateInput {
  disconnect: [tUserQueueWhereUniqueInput!]
  set: [tUserQueueWhereUniqueInput!]
  create: [tUserQueueCreateInput!]
  connect: [tUserQueueWhereUniqueInput!]
}

input tEventQueueRelateToManyForUpdateInput {
  disconnect: [tEventQueueWhereUniqueInput!]
  set: [tEventQueueWhereUniqueInput!]
  create: [tEventQueueCreateInput!]
  connect: [tEventQueueWhereUniqueInput!]
}

input tOptionsUpdateArgs {
  where: tOptionsWhereUniqueInput!
  data: tOptionsUpdateInput!
}

input tOptionsCreateInput {
  optionName: String
  optionShort: String
  optionDescription: String
  optionPrice: Decimal
  historicalPrices: tHistoricalPricesRelateToManyForCreateInput
  optionCarrots: tCarrotsRelateToManyForCreateInput
  userQueue: tUserQueueRelateToManyForCreateInput
  eventQueue: tEventQueueRelateToManyForCreateInput
}

input tHistoricalPricesRelateToManyForCreateInput {
  create: [tHistoricalPricesCreateInput!]
  connect: [tHistoricalPricesWhereUniqueInput!]
}

input tCarrotsRelateToManyForCreateInput {
  create: [tCarrotsCreateInput!]
  connect: [tCarrotsWhereUniqueInput!]
}

input tUserQueueRelateToManyForCreateInput {
  create: [tUserQueueCreateInput!]
  connect: [tUserQueueWhereUniqueInput!]
}

input tEventQueueRelateToManyForCreateInput {
  create: [tEventQueueCreateInput!]
  connect: [tEventQueueWhereUniqueInput!]
}

type tHistoricalPrices {
  id: ID!
  optionId: tOptions
  historicalPrice: Decimal
  historicalPriceStamp: DateTime
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input tHistoricalPricesWhereUniqueInput {
  id: ID
}

input tHistoricalPricesWhereInput {
  AND: [tHistoricalPricesWhereInput!]
  OR: [tHistoricalPricesWhereInput!]
  NOT: [tHistoricalPricesWhereInput!]
  id: IDFilter
  optionId: tOptionsWhereInput
  historicalPrice: DecimalFilter
  historicalPriceStamp: DateTimeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input tHistoricalPricesOrderByInput {
  id: OrderDirection
  historicalPrice: OrderDirection
  historicalPriceStamp: OrderDirection
}

input tHistoricalPricesUpdateInput {
  optionId: tOptionsRelateToOneForUpdateInput
  historicalPrice: Decimal
  historicalPriceStamp: DateTime
}

input tOptionsRelateToOneForUpdateInput {
  create: tOptionsCreateInput
  connect: tOptionsWhereUniqueInput
  disconnect: Boolean
}

input tHistoricalPricesUpdateArgs {
  where: tHistoricalPricesWhereUniqueInput!
  data: tHistoricalPricesUpdateInput!
}

input tHistoricalPricesCreateInput {
  optionId: tOptionsRelateToOneForCreateInput
  historicalPrice: Decimal
  historicalPriceStamp: DateTime
}

input tOptionsRelateToOneForCreateInput {
  create: tOptionsCreateInput
  connect: tOptionsWhereUniqueInput
}

type tUsers {
  id: ID!
  userEmail: String
  userUsername: String
  userPassword: PasswordState
  userWallet: Decimal
  userCarrots(where: tCarrotsWhereInput! = {}, orderBy: [tCarrotsOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: tCarrotsWhereUniqueInput): [tCarrots!]
  userCarrotsCount(where: tCarrotsWhereInput! = {}): Int
  userQueue(where: tUserQueueWhereInput! = {}, orderBy: [tUserQueueOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: tUserQueueWhereUniqueInput): [tUserQueue!]
  userQueueCount(where: tUserQueueWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input tUsersWhereUniqueInput {
  id: ID
  userEmail: String
  userUsername: String
}

input tUsersWhereInput {
  AND: [tUsersWhereInput!]
  OR: [tUsersWhereInput!]
  NOT: [tUsersWhereInput!]
  id: IDFilter
  userEmail: StringFilter
  userUsername: StringFilter
  userWallet: DecimalFilter
  userCarrots: tCarrotsManyRelationFilter
  userQueue: tUserQueueManyRelationFilter
}

input tUsersOrderByInput {
  id: OrderDirection
  userEmail: OrderDirection
  userUsername: OrderDirection
  userWallet: OrderDirection
}

input tUsersUpdateInput {
  userEmail: String
  userUsername: String
  userPassword: String
  userWallet: Decimal
  userCarrots: tCarrotsRelateToManyForUpdateInput
  userQueue: tUserQueueRelateToManyForUpdateInput
}

input tUsersUpdateArgs {
  where: tUsersWhereUniqueInput!
  data: tUsersUpdateInput!
}

input tUsersCreateInput {
  userEmail: String
  userUsername: String
  userPassword: String
  userWallet: Decimal
  userCarrots: tCarrotsRelateToManyForCreateInput
  userQueue: tUserQueueRelateToManyForCreateInput
}

type tCarrots {
  id: ID!
  userId: tUsers
  optionId: tOptions
  carrotPurchasePrice: Decimal
  carrotDatePurchased: DateTime
}

input tCarrotsWhereUniqueInput {
  id: ID
}

input tCarrotsWhereInput {
  AND: [tCarrotsWhereInput!]
  OR: [tCarrotsWhereInput!]
  NOT: [tCarrotsWhereInput!]
  id: IDFilter
  userId: tUsersWhereInput
  optionId: tOptionsWhereInput
  carrotPurchasePrice: DecimalFilter
  carrotDatePurchased: DateTimeNullableFilter
}

input tCarrotsOrderByInput {
  id: OrderDirection
  carrotPurchasePrice: OrderDirection
  carrotDatePurchased: OrderDirection
}

input tCarrotsUpdateInput {
  userId: tUsersRelateToOneForUpdateInput
  optionId: tOptionsRelateToOneForUpdateInput
  carrotPurchasePrice: Decimal
  carrotDatePurchased: DateTime
}

input tUsersRelateToOneForUpdateInput {
  create: tUsersCreateInput
  connect: tUsersWhereUniqueInput
  disconnect: Boolean
}

input tCarrotsUpdateArgs {
  where: tCarrotsWhereUniqueInput!
  data: tCarrotsUpdateInput!
}

input tCarrotsCreateInput {
  userId: tUsersRelateToOneForCreateInput
  optionId: tOptionsRelateToOneForCreateInput
  carrotPurchasePrice: Decimal
  carrotDatePurchased: DateTime
}

input tUsersRelateToOneForCreateInput {
  create: tUsersCreateInput
  connect: tUsersWhereUniqueInput
}

type tUserQueue {
  id: ID!
  uqType: String
  uqOptionId: tOptions
  uqUserId: tUsers
  uqCount: Int
  uqTransactionDate: DateTime
  uqComplete: Boolean
}

input tUserQueueWhereUniqueInput {
  id: ID
}

input tUserQueueWhereInput {
  AND: [tUserQueueWhereInput!]
  OR: [tUserQueueWhereInput!]
  NOT: [tUserQueueWhereInput!]
  id: IDFilter
  uqType: StringFilter
  uqOptionId: tOptionsWhereInput
  uqUserId: tUsersWhereInput
  uqCount: IntNullableFilter
  uqTransactionDate: DateTimeNullableFilter
  uqComplete: BooleanFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input tUserQueueOrderByInput {
  id: OrderDirection
  uqType: OrderDirection
  uqCount: OrderDirection
  uqTransactionDate: OrderDirection
  uqComplete: OrderDirection
}

input tUserQueueUpdateInput {
  uqType: String
  uqOptionId: tOptionsRelateToOneForUpdateInput
  uqUserId: tUsersRelateToOneForUpdateInput
  uqCount: Int
  uqTransactionDate: DateTime
  uqComplete: Boolean
}

input tUserQueueUpdateArgs {
  where: tUserQueueWhereUniqueInput!
  data: tUserQueueUpdateInput!
}

input tUserQueueCreateInput {
  uqType: String
  uqOptionId: tOptionsRelateToOneForCreateInput
  uqUserId: tUsersRelateToOneForCreateInput
  uqCount: Int
  uqTransactionDate: DateTime
  uqComplete: Boolean
}

type tEventQueue {
  id: ID!
  eqType: String
  eqEffects: String
  eqEfectedOptionIds(where: tOptionsWhereInput! = {}, orderBy: [tOptionsOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: tOptionsWhereUniqueInput): [tOptions!]
  eqEfectedOptionIdsCount(where: tOptionsWhereInput! = {}): Int
  eqStartDate: DateTime
  eqCreationDate: DateTime
  eqComplete: Boolean
}

input tEventQueueWhereUniqueInput {
  id: ID
}

input tEventQueueWhereInput {
  AND: [tEventQueueWhereInput!]
  OR: [tEventQueueWhereInput!]
  NOT: [tEventQueueWhereInput!]
  id: IDFilter
  eqType: StringFilter
  eqEffects: StringFilter
  eqEfectedOptionIds: tOptionsManyRelationFilter
  eqStartDate: DateTimeFilter
  eqCreationDate: DateTimeFilter
  eqComplete: BooleanFilter
}

input tOptionsManyRelationFilter {
  every: tOptionsWhereInput
  some: tOptionsWhereInput
  none: tOptionsWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input tEventQueueOrderByInput {
  id: OrderDirection
  eqType: OrderDirection
  eqEffects: OrderDirection
  eqStartDate: OrderDirection
  eqCreationDate: OrderDirection
  eqComplete: OrderDirection
}

input tEventQueueUpdateInput {
  eqType: String
  eqEffects: String
  eqEfectedOptionIds: tOptionsRelateToManyForUpdateInput
  eqStartDate: DateTime
  eqCreationDate: DateTime
  eqComplete: Boolean
}

input tOptionsRelateToManyForUpdateInput {
  disconnect: [tOptionsWhereUniqueInput!]
  set: [tOptionsWhereUniqueInput!]
  create: [tOptionsCreateInput!]
  connect: [tOptionsWhereUniqueInput!]
}

input tEventQueueUpdateArgs {
  where: tEventQueueWhereUniqueInput!
  data: tEventQueueUpdateInput!
}

input tEventQueueCreateInput {
  eqType: String
  eqEffects: String
  eqEfectedOptionIds: tOptionsRelateToManyForCreateInput
  eqStartDate: DateTime
  eqCreationDate: DateTime
  eqComplete: Boolean
}

input tOptionsRelateToManyForCreateInput {
  create: [tOptionsCreateInput!]
  connect: [tOptionsWhereUniqueInput!]
}

type tMarket {
  id: ID!
  mName: String
  mType: String
  mActiveEvent: String
}

input tMarketWhereUniqueInput {
  id: ID
}

input tMarketWhereInput {
  AND: [tMarketWhereInput!]
  OR: [tMarketWhereInput!]
  NOT: [tMarketWhereInput!]
  id: IDFilter
  mName: StringFilter
  mType: StringFilter
  mActiveEvent: StringFilter
}

input tMarketOrderByInput {
  id: OrderDirection
  mName: OrderDirection
  mType: OrderDirection
  mActiveEvent: OrderDirection
}

input tMarketUpdateInput {
  mName: String
  mType: String
  mActiveEvent: String
}

input tMarketUpdateArgs {
  where: tMarketWhereUniqueInput!
  data: tMarketUpdateInput!
}

input tMarketCreateInput {
  mName: String
  mType: String
  mActiveEvent: String
}

type tBlog {
  id: ID!
  bTitle: String
  bSubTitle: String
  bContent: String
  bCreationDate: DateTime
}

input tBlogWhereUniqueInput {
  id: ID
}

input tBlogWhereInput {
  AND: [tBlogWhereInput!]
  OR: [tBlogWhereInput!]
  NOT: [tBlogWhereInput!]
  id: IDFilter
  bTitle: StringFilter
  bSubTitle: StringFilter
  bContent: StringNullableFilter
  bCreationDate: DateTimeFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input tBlogOrderByInput {
  id: OrderDirection
  bTitle: OrderDirection
  bSubTitle: OrderDirection
  bContent: OrderDirection
  bCreationDate: OrderDirection
}

input tBlogUpdateInput {
  bTitle: String
  bSubTitle: String
  bContent: String
  bCreationDate: DateTime
}

input tBlogUpdateArgs {
  where: tBlogWhereUniqueInput!
  data: tBlogUpdateInput!
}

input tBlogCreateInput {
  bTitle: String
  bSubTitle: String
  bContent: String
  bCreationDate: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createtOptions(data: tOptionsCreateInput!): tOptions
  createOptionsList(data: [tOptionsCreateInput!]!): [tOptions]
  updatetOptions(where: tOptionsWhereUniqueInput!, data: tOptionsUpdateInput!): tOptions
  updateOptionsList(data: [tOptionsUpdateArgs!]!): [tOptions]
  deletetOptions(where: tOptionsWhereUniqueInput!): tOptions
  deleteOptionsList(where: [tOptionsWhereUniqueInput!]!): [tOptions]
  createtHistoricalPrices(data: tHistoricalPricesCreateInput!): tHistoricalPrices
  createHistoricalPricesList(data: [tHistoricalPricesCreateInput!]!): [tHistoricalPrices]
  updatetHistoricalPrices(where: tHistoricalPricesWhereUniqueInput!, data: tHistoricalPricesUpdateInput!): tHistoricalPrices
  updateHistoricalPricesList(data: [tHistoricalPricesUpdateArgs!]!): [tHistoricalPrices]
  deletetHistoricalPrices(where: tHistoricalPricesWhereUniqueInput!): tHistoricalPrices
  deleteHistoricalPricesList(where: [tHistoricalPricesWhereUniqueInput!]!): [tHistoricalPrices]
  createtUsers(data: tUsersCreateInput!): tUsers
  createUsersList(data: [tUsersCreateInput!]!): [tUsers]
  updatetUsers(where: tUsersWhereUniqueInput!, data: tUsersUpdateInput!): tUsers
  updateUsersList(data: [tUsersUpdateArgs!]!): [tUsers]
  deletetUsers(where: tUsersWhereUniqueInput!): tUsers
  deleteUsersList(where: [tUsersWhereUniqueInput!]!): [tUsers]
  createtCarrots(data: tCarrotsCreateInput!): tCarrots
  createCarrotsList(data: [tCarrotsCreateInput!]!): [tCarrots]
  updatetCarrots(where: tCarrotsWhereUniqueInput!, data: tCarrotsUpdateInput!): tCarrots
  updateCarrotsList(data: [tCarrotsUpdateArgs!]!): [tCarrots]
  deletetCarrots(where: tCarrotsWhereUniqueInput!): tCarrots
  deleteCarrotsList(where: [tCarrotsWhereUniqueInput!]!): [tCarrots]
  createtUserQueue(data: tUserQueueCreateInput!): tUserQueue
  createUserQueueList(data: [tUserQueueCreateInput!]!): [tUserQueue]
  updatetUserQueue(where: tUserQueueWhereUniqueInput!, data: tUserQueueUpdateInput!): tUserQueue
  updateUserQueueList(data: [tUserQueueUpdateArgs!]!): [tUserQueue]
  deletetUserQueue(where: tUserQueueWhereUniqueInput!): tUserQueue
  deleteUserQueueList(where: [tUserQueueWhereUniqueInput!]!): [tUserQueue]
  createtEventQueue(data: tEventQueueCreateInput!): tEventQueue
  createEventQueueList(data: [tEventQueueCreateInput!]!): [tEventQueue]
  updatetEventQueue(where: tEventQueueWhereUniqueInput!, data: tEventQueueUpdateInput!): tEventQueue
  updateEventQueueList(data: [tEventQueueUpdateArgs!]!): [tEventQueue]
  deletetEventQueue(where: tEventQueueWhereUniqueInput!): tEventQueue
  deleteEventQueueList(where: [tEventQueueWhereUniqueInput!]!): [tEventQueue]
  createtMarket(data: tMarketCreateInput!): tMarket
  createMarketList(data: [tMarketCreateInput!]!): [tMarket]
  updatetMarket(where: tMarketWhereUniqueInput!, data: tMarketUpdateInput!): tMarket
  updateMarketList(data: [tMarketUpdateArgs!]!): [tMarket]
  deletetMarket(where: tMarketWhereUniqueInput!): tMarket
  deleteMarketList(where: [tMarketWhereUniqueInput!]!): [tMarket]
  createtBlog(data: tBlogCreateInput!): tBlog
  createBlogList(data: [tBlogCreateInput!]!): [tBlog]
  updatetBlog(where: tBlogWhereUniqueInput!, data: tBlogUpdateInput!): tBlog
  updateBlogList(data: [tBlogUpdateArgs!]!): [tBlog]
  deletetBlog(where: tBlogWhereUniqueInput!): tBlog
  deleteBlogList(where: [tBlogWhereUniqueInput!]!): [tBlog]
  endSession: Boolean!
  authenticatetUsersWithPassword(userUsername: String!, userPassword: String!): tUsersAuthenticationWithPasswordResult
}

union tUsersAuthenticationWithPasswordResult = tUsersAuthenticationWithPasswordSuccess | tUsersAuthenticationWithPasswordFailure

type tUsersAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: tUsers!
}

type tUsersAuthenticationWithPasswordFailure {
  message: String!
}

type Query {
  tOptions(where: tOptionsWhereUniqueInput!): tOptions
  optionsList(where: tOptionsWhereInput! = {}, orderBy: [tOptionsOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: tOptionsWhereUniqueInput): [tOptions!]
  optionsListCount(where: tOptionsWhereInput! = {}): Int
  tHistoricalPrices(where: tHistoricalPricesWhereUniqueInput!): tHistoricalPrices
  historicalPricesList(where: tHistoricalPricesWhereInput! = {}, orderBy: [tHistoricalPricesOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: tHistoricalPricesWhereUniqueInput): [tHistoricalPrices!]
  historicalPricesListCount(where: tHistoricalPricesWhereInput! = {}): Int
  tUsers(where: tUsersWhereUniqueInput!): tUsers
  usersList(where: tUsersWhereInput! = {}, orderBy: [tUsersOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: tUsersWhereUniqueInput): [tUsers!]
  usersListCount(where: tUsersWhereInput! = {}): Int
  tCarrots(where: tCarrotsWhereUniqueInput!): tCarrots
  carrotsList(where: tCarrotsWhereInput! = {}, orderBy: [tCarrotsOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: tCarrotsWhereUniqueInput): [tCarrots!]
  carrotsListCount(where: tCarrotsWhereInput! = {}): Int
  tUserQueue(where: tUserQueueWhereUniqueInput!): tUserQueue
  userQueueList(where: tUserQueueWhereInput! = {}, orderBy: [tUserQueueOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: tUserQueueWhereUniqueInput): [tUserQueue!]
  userQueueListCount(where: tUserQueueWhereInput! = {}): Int
  tEventQueue(where: tEventQueueWhereUniqueInput!): tEventQueue
  eventQueueList(where: tEventQueueWhereInput! = {}, orderBy: [tEventQueueOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: tEventQueueWhereUniqueInput): [tEventQueue!]
  eventQueueListCount(where: tEventQueueWhereInput! = {}): Int
  tMarket(where: tMarketWhereUniqueInput!): tMarket
  marketList(where: tMarketWhereInput! = {}, orderBy: [tMarketOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: tMarketWhereUniqueInput): [tMarket!]
  marketListCount(where: tMarketWhereInput! = {}): Int
  tBlog(where: tBlogWhereUniqueInput!): tBlog
  blogList(where: tBlogWhereInput! = {}, orderBy: [tBlogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: tBlogWhereUniqueInput): [tBlog!]
  blogListCount(where: tBlogWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = tUsers

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
